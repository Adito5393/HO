

plugins {
    id "edu.sc.seis.macAppBundle" version "2.2.3"
}

apply plugin: 'java'
compileJava.options.encoding = 'UTF-8'
apply plugin: 'application'

repositories {
    jcenter()
}

dependencies {
    compile 'com.jgoodies:jgoodies-looks:2.7.0'
    compile 'com.toedter:jcalendar:1.4'
    compile 'org.scribe:scribe:1.3.0'
    compile 'org.hsqldb:hsqldb:2.4.1'
    compile 'junit:junit:4.12'
}


ext {
    nsis_exe_path = "C:\\Program Files (x86)\\NSIS\\makensis.exe"
    nsis_confPath = "${projectDir}\\buildResources\\Win\\nsis"
    nsis_scriptName = "${nsis_confPath}\\makeWinInstaller.nsi"
    ho_version = "XXX"
    target_dir = "${buildDir}\\artefacts"
    osx_app_dir_sourcedir = "${projectDir}\\buildResources\\OSXapp"
}

mainClassName = 'HOLauncher'

macAppBundle {
    mainClassName = "HOLauncher"
    icon = "${project.ext.osx_app_dir_sourcedir}\\source\\Hattrick Organizer.app\\Contents\\Resources\\HO.icns"
    bundleJRE = true
    javaProperties.put("apple.laf.useScreenMenuBar", "true")
    backgroundImage = "${project.ext.osx_app_dir_sourcedir}\\background\\Back_BETA.png"
}

// define custom function ---------------------
import java.util.regex.Matcher;
import java.util.regex.Pattern;
String getParameter(String regex, String hoInfoPath) {

    Pattern pattern = Pattern.compile(regex);

    try {BufferedReader br = new BufferedReader(new FileReader(hoInfoPath))
        String line;
        while ((line = br.readLine()) != null) {
               Matcher matcher = pattern.matcher(line)
                if (matcher.find()){return (matcher.group(1))}
              }
        }
    catch (e) {print("Error", e)}
}
// ------------------------------------------


jar {
    manifest {
        attributes 'Main-Class': 'HOLauncher'
    }
}

task makeAll(type: GradleBuild) {
    group 'ho'
    description 'Create HO.jar, HO.zip, and HO.exe">'
    tasks = ['init', 'installDist', 'AddResourcesAndZip', 'makeWinInstaller', 'createApp', 'AddResourcesAndZipMacApp']
}

task init{
    group 'ho'
    description 'get HO Version'
    doLast {
        //     Deleting build project     ---------------------------------------------------------------------
        println("Deleting build project ....")
        project.delete(files("${buildDir}/"))
        //     Getting HO version...      ---------------------------------------------------------------------
        print("Getting HO version...")
        def hoInfoPath = "${projectDir}\\src\\main\\java\\core\\HO.java"
        project.ext.ho_version = getParameter("\\WVERSION[\\s]*=[\\s]*([0-9.]*)", hoInfoPath)
        def isDevelopment = getParameter("\\DEVELOPMENT[\\s]*=[\\s]*([a-zA-Z]*)", hoInfoPath)
        if (isDevelopment) {
            project.ext.ho_version += "_BETA"
        }
        println(": ${project.ext.ho_version}")
        //     Creating Target directory ...  ---------------------------------------------------------------------
        println("creating directory for artefacts: ${target_dir}")
        mkdir project.ext.target_dir
    }
}

distributions {
    main {
        baseName = 'XXX'
        }

}

task makeWinInstaller {
    description 'Create Win32-Installer using NSIS'

    doLast {
        println("Creating win32 installer at ${target_dir} using NSIS...")

        def DBUILDDIR = "${buildDir}\\install\\${project.ext.ho_version}"
        def DOUTFILE="${project.ext.target_dir}\\HO_${project.ext.ho_version}_Win32_Installer.exe"

          print("-V2"+" "+"-NOCD"+" "+"-DBUILDDIR=${DBUILDDIR}"+" "+ "-DHOVERSION='${project.ext.ho_version}'"+" "+ "-DCONFPATH=${nsis_confPath}"+" "+ "-DOUTFILE='${DOUTFILE}'"+" "+ "${project.ext.nsis_scriptName}")
        exec {
            executable nsis_exe_path
            args "-V2", "-NOCD", "-DBUILDDIR=${DBUILDDIR}", "-DHOVERSION='${project.ext.ho_version}'", "-DCONFPATH=${nsis_confPath}", "-DOUTFILE='${DOUTFILE}'", "${project.ext.nsis_scriptName}"
        }

    }
}

task AddResourcesAndZip {
    group 'tool'
    dependsOn 'init', 'installDist'
    def distribDir = file("${buildDir}/install/XXX")
    doLast {
        println("adding resources folder")
        copy {
            from "${projectDir}\\src\\main\\resources\\changelog.txt"
            into distribDir
        }
        copy {
            from "${projectDir}\\src\\main\\resources\\sprache"
            into "${distribDir}\\sprache"
        }
        copy {
            from "${projectDir}\\src\\main\\resources\\gui"
            into "${distribDir}\\gui"
        }
        copy {
            from "${projectDir}\\src\\main\\resources\\flags"
            into "${distribDir}\\flags"
        }
        copy {
            from "${projectDir}\\src\\main\\resources\\prediction"
            into "${distribDir}\\prediction"
        }
        copy {
            from "${projectDir}\\src\\main\\resources\\HO.bat"
            into "${distribDir}"
        }
        copy {
            from "${projectDir}\\src\\main\\resources\\HO.sh"
            into "${distribDir}"
        }
        copy {
            from "${distribDir}/lib"
            include "**/*.jar"
            into "${distribDir}"
        }
        copy {
            from "${projectDir}\\src\\main\\resources\\themes"
            into "${distribDir}\\themes"
        }
        delete "${distribDir}\\bin"
        delete "${distribDir}\\gui"
        delete "${distribDir}\\lib"
        delete "${distribDir}\\hamcrest-core-1.3.jar"
        delete "${distribDir}\\junit-4.12.jar"


        println("renaming distribution")
        copy {
            from("${distribDir}")
            into("${buildDir}/install/${project.ext.ho_version}")
        }
        delete "${distribDir}"

        println("zipping distribution")
        task(ZipDistribution, type: Zip) {
            archiveName = "HO_${project.ext.ho_version}.zip"
            from "${buildDir}/install/${project.ext.ho_version}"
            destinationDir = file("${project.ext.target_dir}")
        }.execute()

    }
}

task AddResourcesAndZipMacApp {
    dependsOn 'init', 'createApp'
    def macAppDir = file("${buildDir}\\macApp\\HOtest.app\\Contents\\Java")
    doLast {
        println("adding resources folder")
        copy {
            from "${projectDir}\\src\\main\\resources\\changelog.txt"
            into macAppDir
        }
        copy {
            from "${projectDir}\\src\\main\\resources\\sprache"
            into "${macAppDir}\\sprache"
        }
        copy {
            from "${projectDir}\\src\\main\\resources\\gui"
            into "${macAppDir}\\gui"
        }
        copy {
            from "${projectDir}\\src\\main\\resources\\flags"
            into "${macAppDir}\\flags"
        }
        copy {
            from "${projectDir}\\src\\main\\resources\\prediction"
            into "${macAppDir}\\prediction"
        }
        copy {
            from "${projectDir}\\src\\main\\resources\\themes"
            into "${macAppDir}\\themes"
        }
        delete "${macAppDir}\\hamcrest-core-1.3.jar"
        delete "${macAppDir}\\junit-4.12.jar"

        println("renaming MacApp distribution")
        copy {
            from("${buildDir}\\macApp\\HOtest.app")
            into("${buildDir}\\macApp\\HO_${project.ext.ho_version}")
        }
        delete "${buildDir}\\\\macApp\\\\HOtest.app"

        println("zipping MacApp distribution")
        task(ZipMacAppDistribution, type: Zip) {
            archiveName = "HO_${project.ext.ho_version}.OSX.zip"
            from "${buildDir}\\macApp\\HO_${project.ext.ho_version}"
            destinationDir = file("${project.ext.target_dir}")
        }.execute()

    }

}



