

apply plugin: 'java'
compileJava.options.encoding = 'UTF-8'

apply plugin: 'application'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}


dependencies {

    compile 'com.google.guava:guava:23.0'
    compile 'com.jgoodies:jgoodies-looks:2.7.0'
    compile 'com.toedter:jcalendar:1.4'
    compile 'org.scribe:scribe:1.3.0'
    compile 'org.hsqldb:hsqldb:2.4.1' 
    compile 'junit:junit:4.12'    //  do we really need that file outside of test ?   src/main/java/ho/tool/updater/VersionTest.java

    // Use JUnit test framework
    testCompile 'junit:junit:4.12'

}





// Define the main class for the application
mainClassName = 'HO'


import java.util.regex.Matcher;
import java.util.regex.Pattern;


String getParameter(String regex, String hoInfoPath) {

    Pattern pattern = Pattern.compile(regex);

    try {BufferedReader br = new BufferedReader(new FileReader(hoInfoPath))
        String line;
        while ((line = br.readLine()) != null) {
               Matcher matcher = pattern.matcher(line)
                if (matcher.find()){return (matcher.group(1))}
              }
        }
    catch (e) {print("Error", e)}


}

ext {

      nsis_exe_path = "C:\\Program Files (x86)\\NSIS\\makensis.exe"
      nsis_confPath = "${projectDir}\\nsis"
      nsis_scriptName = "${projectDir}\\nsis\\makeWinInstaller.nsi"
      ho_version = "tototot"

//    output.basedir=${basedir}
       target_dir= "${buildDir}\\target"

//
//      export.nsis.export.dir = "${target.dir}/export.w32installer"
//    tmp_target = "3.1.0.RELEASE"
//    export_dmg_targetdir = "build@master.org"
//    build_dir = ""
//    debug_dir = ""
}


jar {
    manifest {
        attributes 'Main-Class': 'HO'
    }
}

distributions {
    main {
        baseName = 'HOHOHOHO'
        contents {
            from { 'src\\main\\resources\\AddToZip' }
        }
    }
}

task init{
    group 'ho'
    description 'get HO Version'
    doLast {
        def hoInfoPath = "${projectDir}\\src\\main\\java\\core\\info\\hoInfo.java"

        project.ext.ho_version = getParameter("\\WVERSION[\\s]*=[\\s]*([0-9.]*)", hoInfoPath)
        def isDevlopment = getParameter("\\DEVELOPMENT[\\s]*=[\\s]*([a-zA-Z]*)", hoInfoPath)
        if (isDevlopment) {
            project.ext.ho_version += "_BETA"
        }
        println("HO version: ${project.ext.ho_version}")
    }
}

task makeWinIstaller {
    group 'ho'
    description 'Create Win32-Installer using NSIS'  //depends="copy2build"
    dependsOn 'init'
    
    doLast {
        println("Creating win32 installer at ${target_dir} using NSIS...")

    mkdir target_dir

    def installerName = "${target_dir}/HO_${project.ext.ho_version}_Win32_Installer.exe"
    def nsis_default_args = "-V2 -NOCD -DBUILDDIR='D:\\Perso\\Code\\HO\\build\\distributions\\HOHOHOHO\\HOHOHOHO' -DHOVERSION='${project.ext.ho_version}' -DCONFPATH='${nsis_confPath}'"
    def nsis_command = "${nsis_exe_path} ${nsis_default_args} -DOUTFILE='${installerName}' ${nsis_scriptName}"

    println(nsis_command)
        
        // should be equals to
        //Program Files (x86)\NSIS\makensis.exe" -V2 -NOCD -DBUILDDIR=D:\Perso\Code\HO\build\distributions\HOHOHOHO\HOHOHOHO -DHOVERSION='1.435_BETA' -DCONFPATH=D:\Perso\Code\HO\nsis -DOUTFILE='D:\Perso\Code\HO\build\target/HO_1.435_BETA_Win32_Installer.exe' D:\Perso\Code\HO\nsis\makeWinInstaller.nsi

    exec {
        executable nsis_exe_path
        args "${nsis_default_args} -DOUTFILE='${installerName}' ${nsis_scriptName}"
    }
    println "Executed!"

        commandLine 'cmd', 'nsis', '-v'

//
//				<!-- Create ZIP files for esnips.com (executables are not allowed) -->
//				<zip destfile="${export.nsis.installerName}.zip">
//					<fileset file="${export.nsis.installerName}" />
//        </zip>
//
//				<if>
//					<and>
//						<available file="${export.nsis.JRE.DistPath}/${export.nsis.JRE.DistFile}" />
//<equals arg1="${export.nsis.JRE.buildBundle}" arg2="true" />
//        </and>
//					<then>
//						<!-- Create Installer for HO bundled with JRE -->
//						<echo>Creating win32 installer at ${export.nsis.installerName.WithJRE} with JRE ${export.nsis.JRE.Version} using NSIS...</echo>
//        <exec command="${export.nsis.command}">
//        <arg line="${export.nsis.default.args} -DOUTFILE='${export.nsis.pathPrefix}${export.nsis.installerName.WithJRE}' -DWITHJRE=${export.nsis.JRE.Version} -DJREPATH=${export.nsis.pathPrefix}${export.nsis.JRE.DistPath} -DJREFILE=${export.nsis.JRE.DistFile} ${export.nsis.pathPrefix}${export.nsis.scriptName}" />
//        </exec>
//						<zip destfile="${export.nsis.installerName.WithJRE}.zip">
//							<fileset file="${export.nsis.installerName.WithJRE}" />
//        </zip>
//					</then>
//        <else>
//<echo>Not creating JRE bundled version because export.nsis.JRE.buildBundle=false or ${export.nsis.JRE.DistPath}/${export.nsis.JRE.DistFile} is not available...</echo>
//					</else>
//</if>
//			</then>
//        </if>
//	</target>
//

}}