apply plugin: 'java'
compileJava.options.encoding = 'UTF-8'
apply plugin: 'application'

repositories {
    jcenter()
}

dependencies {

    //compile 'com.google.guava:guava:23.0'
    compile 'com.jgoodies:jgoodies-looks:2.7.0'
    compile 'com.toedter:jcalendar:1.4'
    compile 'org.scribe:scribe:1.3.0'
    compile 'org.hsqldb:hsqldb:2.4.1' 
    compile 'junit:junit:4.12'    //  do we really need that file outside of test ?   src/main/java/ho/tool/updater/VersionTest.java

    // Use JUnit test framework
    testCompile 'junit:junit:4.12'

}


mainClassName = 'HO'

// define custom function ---------------------
import java.util.regex.Matcher;
import java.util.regex.Pattern;
String getParameter(String regex, String hoInfoPath) {

    Pattern pattern = Pattern.compile(regex);

    try {BufferedReader br = new BufferedReader(new FileReader(hoInfoPath))
        String line;
        while ((line = br.readLine()) != null) {
               Matcher matcher = pattern.matcher(line)
                if (matcher.find()){return (matcher.group(1))}
              }
        }
    catch (e) {print("Error", e)}
}
// ------------------------------------------

ext {
      nsis_exe_path = "C:\\Program Files (x86)\\NSIS\\makensis.exe"
      nsis_confPath = "${projectDir}\\src\\main\\resources\\nsis"
      nsis_scriptName = "${nsis_confPath}\\makeWinInstaller.nsi"
      ho_version = "XXX"
       target_dir= "${buildDir}\\artefacts"
}

jar {
    manifest {
        attributes 'Main-Class': 'HO'
    }
}

task makeAll(type: GradleBuild) {
    group 'ho'
    description 'Create HO.jar, HO.zip, and HO.exe">'
    tasks = ['init', 'installDist', 'AddResourcesAndZip', 'makeWinInstaller']
}

task init{
    group 'ho'
    description 'get HO Version'
    doLast {
        //     Deleting build project     ---------------------------------------------------------------------
        println("Deleting build project ....")
        project.delete(files("${buildDir}/"))
        //     Getting HO version...      ---------------------------------------------------------------------
        print("Getting HO version...")
        def hoInfoPath = "${projectDir}\\src\\main\\java\\core\\info\\hoInfo.java"
        project.ext.ho_version = getParameter("\\WVERSION[\\s]*=[\\s]*([0-9.]*)", hoInfoPath)
        def isDevlopment = getParameter("\\DEVELOPMENT[\\s]*=[\\s]*([a-zA-Z]*)", hoInfoPath)
        if (isDevlopment) {
            project.ext.ho_version += "_BETA"
        }
        println(": ${project.ext.ho_version}")
        //     Creating Target directory ...  ---------------------------------------------------------------------
        println("creating directory for artefacts: ${target_dir}")
        mkdir target_dir
    }
}

distributions {
    main {
        baseName = 'XXX'
        }

}

task makeWinInstaller {
    group 'ho'
    description 'Create Win32-Installer using NSIS'  //depends="copy2build"
    dependsOn 'init'

    doLast {
        println("Creating win32 installer at ${target_dir} using NSIS...")

        def DBUILDDIR = "${buildDir}\\install\\${project.ext.ho_version}"
        def DOUTFILE="${project.ext.target_dir}\\${project.ext.ho_version}_Win32_Installer.exe"

          print("-V2"+" "+"-NOCD"+" "+"-DBUILDDIR=${DBUILDDIR}"+" "+ "-DHOVERSION='${project.ext.ho_version}'"+" "+ "-DCONFPATH=${nsis_confPath}"+" "+ "-DOUTFILE='${DOUTFILE}'"+" "+ "${project.ext.nsis_scriptName}")
        exec {
            executable nsis_exe_path
            args "-V2", "-NOCD", "-DBUILDDIR=${DBUILDDIR}", "-DHOVERSION='${project.ext.ho_version}'", "-DCONFPATH=${nsis_confPath}", "-DOUTFILE='${DOUTFILE}'", "${project.ext.nsis_scriptName}"
        }

    }
}

task AddResourcesAndZip {
    group 'tool'
    dependsOn 'init', 'installDist'
    def distribDir = file("${buildDir}/install/XXX")
    def HOUPdater_build_dir = project(':HOUpdater').buildDir
    doLast {
        println("adding resources folder")
        copy {
            from "${projectDir}\\src\\main\\resources\\changelog.txt"
            into distribDir
        }
        copy {
            from "${projectDir}\\src\\main\\resources\\sprache"
            into "${distribDir}\\sprache"
        }
        copy {
            from "${projectDir}\\src\\main\\resources\\gui"
            into "${distribDir}\\gui"
        }
        copy {
            from "${projectDir}\\src\\main\\resources\\flags"
            into "${distribDir}\\flags"
        }
        copy {
            from "${projectDir}\\src\\main\\resources\\prediction"
            into "${distribDir}\\prediction"
        }
        copy {
            from "${HOUPdater_build_dir}\\classes\\java\\main\\HOUpdater.class"
            into "${distribDir}"
        }
        copy {
            from "${projectDir}\\src\\main\\resources\\HO.bat"
            into "${distribDir}"
        }
        copy {
            from "${projectDir}\\src\\main\\resources\\HO.sh"
            into "${distribDir}"
        }
        copy {
            from "${distribDir}/lib"
            include "**/*.jar"
            into "${distribDir}"
        }
        copy {
            from "${projectDir}\\src\\main\\resources\\themes"
            into "${distribDir}\\themes"
        }
        delete "${distribDir}\\bin"
        delete "${distribDir}\\gui"
        delete "${distribDir}\\lib"
        delete "${distribDir}\\hamcrest-core-1.3.jar"
        delete "${distribDir}\\junit-4.12.jar"


        println("renaming distribution")
        copy {
            from("${distribDir}")
            into("${buildDir}/install/${project.ext.ho_version}")
        }
        delete "${distribDir}"

        println("zipping distribution")
        task(ZipDistribution, type: Zip) {
            archiveName = "${project.ext.ho_version}.zip"
            from "${buildDir}/install/${project.ext.ho_version}"
            destinationDir = file("${project.ext.target_dir}")
        }.execute()

    }





    }



//TODO: a prioiri le .bat in ressource folder is now working
// Il faut maintenant 
// 1) remplacer celui generer automaticement dans install programme par celui la 
// 2) delete le .sh, et peut etre le JUNIT 
// 3( tester il est peut etre possible de mettre un lib/*.jar plutot que de tous les nommer 1 a 1
